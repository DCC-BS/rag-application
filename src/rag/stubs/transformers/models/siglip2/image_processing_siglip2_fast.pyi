"""
This type stub file was generated by pyright.
"""

import torch

from ...image_processing_utils import BatchFeature
from ...image_processing_utils_fast import (
    BASE_IMAGE_PROCESSOR_FAST_DOCSTRING,
    BASE_IMAGE_PROCESSOR_FAST_DOCSTRING_PREPROCESS,
    BaseImageProcessorFast,
    DefaultFastImageProcessorKwargs,
)
from ...image_utils import ImageInput
from ...processing_utils import Unpack
from ...utils import add_start_docstrings, is_torch_available, is_torchvision_available

"""Fast Image processor class for SigLIP2."""
if is_torch_available(): ...
if is_torchvision_available(): ...
logger = ...

def convert_image_to_patches(image: torch.Tensor, patch_size: int) -> torch.Tensor:
    """
    Convert 3D tensor image of shape (num_channels, image_height, image_width) into 2D tensor of patches of shape
    (num_patches_height * num_patches_width, patch_size * patch_size * num_channels).
    """
    ...

def pad_along_first_dim(
    tensor: torch.Tensor, target_length: int, pad_value: int = ...
) -> tuple[torch.Tensor, torch.Tensor]:
    """
    Pad the tensor along the first dimension.
    """
    ...

class Siglip2FastImageProcessorKwargs(DefaultFastImageProcessorKwargs):
    patch_size: int | None
    max_num_patches: int | None
    ...

@add_start_docstrings(
    r"Constructs a fast Siglip2 image processor.",
    BASE_IMAGE_PROCESSOR_FAST_DOCSTRING,
    """
        patch_size (`int`, *optional*, defaults to 16):
            The size (resolution) of each patch the image will be split to.
        max_num_patches (`int`, *optional*, defaults to 256):
            The image will be resized to have at most this number of patches,
            and then padded in "patch" dimension to match this number exactly.
    """,
)
class Siglip2ImageProcessorFast(BaseImageProcessorFast):
    resample = ...
    image_mean = ...
    image_std = ...
    do_resize = ...
    do_rescale = ...
    do_normalize = ...
    patch_size = ...
    max_num_patches = ...
    valid_kwargs = Siglip2FastImageProcessorKwargs
    unused_kwargs = ...
    def __init__(self, **kwargs: Unpack[Siglip2FastImageProcessorKwargs]) -> None: ...
    @add_start_docstrings(
        BASE_IMAGE_PROCESSOR_FAST_DOCSTRING_PREPROCESS,
        """
        patch_size (`int`, *optional*, defaults to `self.patch_size`):
            The size (resolution) of each patch the image will be split to.
        max_num_patches (`int`, *optional*, defaults to `self.max_num_patches`):
            The image will be resized to have at most this number of patches,
            and then padded in "patch" dimension to match this number exactly.
        """,
    )
    def preprocess(self, images: ImageInput, **kwargs: Unpack[Siglip2FastImageProcessorKwargs]) -> BatchFeature: ...

__all__ = ["Siglip2ImageProcessorFast"]
