"""
This type stub file was generated by pyright.
"""

import torch

from ...image_processing_utils import BatchFeature
from ...image_processing_utils_fast import (
    BASE_IMAGE_PROCESSOR_FAST_DOCSTRING,
    BASE_IMAGE_PROCESSOR_FAST_DOCSTRING_PREPROCESS,
    BaseImageProcessorFast,
    DefaultFastImageProcessorKwargs,
)
from ...image_utils import ImageInput
from ...processing_utils import Unpack
from ...utils import add_start_docstrings, is_torch_available, is_torchvision_available

"""Fast Image processor class for Got-OCR-2."""
if is_torch_available(): ...
if is_torchvision_available(): ...

class GotOcr2ImageProcessorKwargs(DefaultFastImageProcessorKwargs):
    crop_to_patches: bool | None
    min_patches: int | None
    max_patches: int | None
    ...

@add_start_docstrings(
    "Constructs a fast GotOcr2 image processor.",
    BASE_IMAGE_PROCESSOR_FAST_DOCSTRING,
    """
        crop_to_patches (`bool`, *optional*, defaults to `False`):
            Whether to crop the image to patches. Can be overridden by the `crop_to_patches` parameter in the
            `preprocess` method.
        min_patches (`int`, *optional*, defaults to 1):
            The minimum number of patches to be extracted from the image. Only has an effect if `crop_to_patches` is
            set to `True`. Can be overridden by the `min_patches` parameter in the `preprocess` method.
        max_patches (`int`, *optional*, defaults to 12):
            The maximum number of patches to be extracted from the image. Only has an effect if `crop_to_patches` is
            set to `True`. Can be overridden by the `max_patches` parameter in the `preprocess` method.
    """,
)
class GotOcr2ImageProcessorFast(BaseImageProcessorFast):
    resample = ...
    image_mean = ...
    image_std = ...
    size = ...
    do_resize = ...
    do_rescale = ...
    do_normalize = ...
    do_convert_rgb = ...
    crop_to_patches = ...
    min_patches = ...
    max_patches = ...
    valid_kwargs = GotOcr2ImageProcessorKwargs
    def __init__(self, **kwargs: Unpack[valid_kwargs]) -> None: ...
    @add_start_docstrings(
        BASE_IMAGE_PROCESSOR_FAST_DOCSTRING_PREPROCESS,
        """
            crop_to_patches (`bool`, *optional*, defaults to `False`):
                Whether to crop the image to patches. Can be overridden by the `crop_to_patches` parameter in the
                `preprocess` method.
            min_patches (`int`, *optional*, defaults to 1):
                The minimum number of patches to be extracted from the image. Only has an effect if `crop_to_patches` is
                set to `True`. Can be overridden by the `min_patches` parameter in the `preprocess` method.
            max_patches (`int`, *optional*, defaults to 12):
                The maximum number of patches to be extracted from the image. Only has an effect if `crop_to_patches` is
                set to `True`. Can be overridden by the `max_patches` parameter in the `preprocess` method.
        """,
    )
    def preprocess(self, images: ImageInput, **kwargs: Unpack[valid_kwargs]) -> BatchFeature: ...
    def crop_image_to_patches(
        self,
        images: torch.Tensor,
        min_patches: int,
        max_patches: int,
        use_thumbnail: bool = ...,
        patch_size: tuple | int | dict = ...,
        interpolation: F.InterpolationMode | None = ...,
    ):  # -> Tensor:
        """
        Crop the images to patches and return a list of cropped images.
        The number of patches and their grid arrangement are determined by the original image size,
        the target patch size and the minimum and maximum number of patches.
        The aspect ratio of the patches grid is chosen to be the closest to the original image aspect ratio.

        Args:
            images (`torch.Tensor`):
                The images to be cropped.
            min_patches (`int`):
                The minimum number of patches to be extracted from the image.
            max_patches (`int`):
                The maximum number of patches to be extracted from the image.
            use_thumbnail (`bool`, *optional*, defaults to `True`):
                Whether to add a thumbnail image to the list of cropped patches.
            patch_size (`int`, `Tuple[int, int]`, `dict`, *optional*):
                The size of the output patches.
                The format of the image data. If `None`, the format is inferred from the input image.

        Returns:
            List[`PIL.Image.Image`] or List[np.ndarray]: The list of cropped images.
        """
        ...

__all__ = ["GotOcr2ImageProcessorFast"]
