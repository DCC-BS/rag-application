"""
This type stub file was generated by pyright.
"""

from ...image_utils import ImageInput, VideoInput
from ...processing_utils import ImagesKwargs, ProcessingKwargs, ProcessorMixin
from ...tokenization_utils_base import AudioInput, BatchEncoding, PreTokenizedInput, TextInput
from ...utils import is_tf_available, is_torch_available

"""
Processor class for SAM.
"""
if is_torch_available(): ...
if is_tf_available(): ...

class SamImagesKwargs(ImagesKwargs):
    segmentation_maps: ImageInput | None
    input_points: list[list[float]] | None
    input_labels: list[list[int]] | None
    input_boxes: list[list[list[float]]] | None
    point_pad_value: int | None
    ...

class SamProcessorKwargs(ProcessingKwargs, total=False):
    images_kwargs: SamImagesKwargs
    _defaults = ...

class SamProcessor(ProcessorMixin):
    r"""
    Constructs a SAM processor which wraps a SAM image processor and an 2D points & Bounding boxes processor into a
    single processor.

    [`SamProcessor`] offers all the functionalities of [`SamImageProcessor`]. See the docstring of
    [`~SamImageProcessor.__call__`] for more information.

    Args:
        image_processor (`SamImageProcessor`):
            An instance of [`SamImageProcessor`]. The image processor is a required input.
    """

    attributes = ...
    image_processor_class = ...
    optional_call_args = ...
    def __init__(self, image_processor) -> None: ...
    def __call__(
        self,
        images: ImageInput | None = ...,
        *args,
        text: TextInput | PreTokenizedInput | list[TextInput] | list[PreTokenizedInput] | None = ...,
        audio: AudioInput | None = ...,
        video: VideoInput | None = ...,
        **kwargs,
    ) -> BatchEncoding:
        """
        This method uses [`SamImageProcessor.__call__`] method to prepare image(s) for the model. It also prepares 2D
        points and bounding boxes for the model if they are provided.
        """
        ...

    @property
    def model_input_names(self):  # -> list[Any]:
        ...
    def post_process_masks(self, *args, **kwargs): ...

__all__ = ["SamProcessor"]
