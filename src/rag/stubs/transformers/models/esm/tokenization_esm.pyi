"""
This type stub file was generated by pyright.
"""

from ...tokenization_utils import PreTrainedTokenizer

"""Tokenization classes for ESM."""
logger = ...
VOCAB_FILES_NAMES = ...

def load_vocab_file(vocab_file):  # -> list[str]:
    ...

class EsmTokenizer(PreTrainedTokenizer):
    """
    Constructs an ESM tokenizer.
    """

    vocab_files_names = ...
    model_input_names = ...
    def __init__(
        self, vocab_file, unk_token=..., cls_token=..., pad_token=..., mask_token=..., eos_token=..., **kwargs
    ) -> None: ...
    def get_vocab(self):  # -> dict[str, int]:
        ...
    def token_to_id(self, token: str) -> int: ...
    def id_to_token(self, index: int) -> str: ...
    def build_inputs_with_special_tokens(
        self, token_ids_0: list[int], token_ids_1: list[int] | None = ...
    ) -> list[int]: ...
    def get_special_tokens_mask(
        self, token_ids_0: list, token_ids_1: list | None = ..., already_has_special_tokens: bool = ...
    ) -> list[int]:
        """
        Retrieves sequence ids from a token list that has no special tokens added. This method is called when adding
        special tokens using the tokenizer `prepare_for_model` or `encode_plus` methods.

        Args:
            token_ids_0 (`List[int]`):
                List of ids of the first sequence.
            token_ids_1 (`List[int]`, *optional*):
                List of ids of the second sequence.
            already_has_special_tokens (`bool`, *optional*, defaults to `False`):
                Whether or not the token list is already formatted with special tokens for the model.

        Returns:
            A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.
        """
        ...

    def save_vocabulary(self, save_directory, filename_prefix):  # -> tuple[str]:
        ...
    @property
    def vocab_size(self) -> int: ...

__all__ = ["EsmTokenizer"]
